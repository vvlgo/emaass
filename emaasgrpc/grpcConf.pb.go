// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcConf.proto

// 定义包名

package emaasgrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 定义 Req 消息结构
type Req struct {
	// 类型 字段 = 标识号
	EmpID                string   `protobuf:"bytes,1,opt,name=empID,proto3" json:"empID,omitempty"`
	PositionName         string   `protobuf:"bytes,2,opt,name=positionName,proto3" json:"positionName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2d190e649a970b, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetEmpID() string {
	if m != nil {
		return m.EmpID
	}
	return ""
}

func (m *Req) GetPositionName() string {
	if m != nil {
		return m.PositionName
	}
	return ""
}

type Ress struct {
	Res                  []*Res   `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ress) Reset()         { *m = Ress{} }
func (m *Ress) String() string { return proto.CompactTextString(m) }
func (*Ress) ProtoMessage()    {}
func (*Ress) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2d190e649a970b, []int{1}
}

func (m *Ress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ress.Unmarshal(m, b)
}
func (m *Ress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ress.Marshal(b, m, deterministic)
}
func (m *Ress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ress.Merge(m, src)
}
func (m *Ress) XXX_Size() int {
	return xxx_messageInfo_Ress.Size(m)
}
func (m *Ress) XXX_DiscardUnknown() {
	xxx_messageInfo_Ress.DiscardUnknown(m)
}

var xxx_messageInfo_Ress proto.InternalMessageInfo

func (m *Ress) GetRes() []*Res {
	if m != nil {
		return m.Res
	}
	return nil
}

// 定义 Res 消息结构
type Res struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	DepartmentName       string   `protobuf:"bytes,3,opt,name=department_name,json=departmentName,proto3" json:"department_name,omitempty"`
	Position             string   `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	EmployeeStatus       int32    `protobuf:"varint,5,opt,name=employee_status,json=employeeStatus,proto3" json:"employee_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Res) Reset()         { *m = Res{} }
func (m *Res) String() string { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()    {}
func (*Res) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2d190e649a970b, []int{2}
}

func (m *Res) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Res.Unmarshal(m, b)
}
func (m *Res) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Res.Marshal(b, m, deterministic)
}
func (m *Res) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Res.Merge(m, src)
}
func (m *Res) XXX_Size() int {
	return xxx_messageInfo_Res.Size(m)
}
func (m *Res) XXX_DiscardUnknown() {
	xxx_messageInfo_Res.DiscardUnknown(m)
}

var xxx_messageInfo_Res proto.InternalMessageInfo

func (m *Res) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Res) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Res) GetDepartmentName() string {
	if m != nil {
		return m.DepartmentName
	}
	return ""
}

func (m *Res) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Res) GetEmployeeStatus() int32 {
	if m != nil {
		return m.EmployeeStatus
	}
	return 0
}

func init() {
	proto.RegisterType((*Req)(nil), "emaasgrpc.Req")
	proto.RegisterType((*Ress)(nil), "emaasgrpc.Ress")
	proto.RegisterType((*Res)(nil), "emaasgrpc.Res")
}

func init() { proto.RegisterFile("grpcConf.proto", fileDescriptor_0f2d190e649a970b) }

var fileDescriptor_0f2d190e649a970b = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x9b, 0xa4, 0x29, 0xcd, 0x28, 0xa9, 0x2e, 0x1e, 0x42, 0xbd, 0x84, 0xbd, 0x98, 0x53,
	0x0e, 0x55, 0xbc, 0x8a, 0x7f, 0x40, 0xbc, 0x88, 0xac, 0x88, 0xc7, 0xb2, 0x26, 0xa3, 0x04, 0x4c,
	0x76, 0xbb, 0xb3, 0x11, 0xfa, 0x6d, 0xfc, 0xa8, 0xb2, 0x89, 0x69, 0x89, 0x1e, 0xe7, 0x37, 0x6f,
	0xde, 0xdb, 0xd9, 0x81, 0xf8, 0xc3, 0xe8, 0xe2, 0x56, 0x35, 0xef, 0xb9, 0x36, 0xca, 0x2a, 0x16,
	0x61, 0x2d, 0x25, 0x39, 0xc8, 0xaf, 0x20, 0x10, 0xb8, 0x61, 0x27, 0x10, 0x62, 0xad, 0x1f, 0xee,
	0x12, 0x2f, 0xf5, 0xb2, 0x48, 0xf4, 0x05, 0xe3, 0x70, 0xa8, 0x15, 0x55, 0xb6, 0x52, 0xcd, 0xa3,
	0xac, 0x31, 0xf1, 0xbb, 0xe6, 0x88, 0xf1, 0x0c, 0xa6, 0x02, 0x89, 0x58, 0x0a, 0x81, 0x41, 0x4a,
	0xbc, 0x34, 0xc8, 0x0e, 0x56, 0x71, 0xbe, 0x4b, 0xc8, 0x05, 0x92, 0x70, 0x2d, 0xfe, 0xed, 0xb9,
	0x2c, 0x62, 0x31, 0xf8, 0x55, 0xf9, 0x1b, 0xe4, 0x57, 0x25, 0x3b, 0x85, 0xa8, 0x25, 0x34, 0xeb,
	0x66, 0x1f, 0x31, 0x77, 0xc0, 0xd9, 0xb3, 0x33, 0x58, 0x94, 0xa8, 0xa5, 0xb1, 0x35, 0x36, 0xb6,
	0x97, 0x04, 0x9d, 0x24, 0xde, 0xe3, 0x4e, 0xb8, 0x84, 0xf9, 0xf0, 0xae, 0x64, 0xda, 0x9b, 0x0c,
	0xb5, 0x33, 0xc1, 0x5a, 0x7f, 0xaa, 0x2d, 0xe2, 0x9a, 0xac, 0xb4, 0x2d, 0x25, 0x61, 0xea, 0x65,
	0xa1, 0x88, 0x07, 0xfc, 0xdc, 0xd1, 0xd5, 0x17, 0xcc, 0x5e, 0x65, 0x65, 0xd1, 0xb0, 0x4b, 0x38,
	0xbe, 0x47, 0xfb, 0x42, 0x68, 0x6e, 0xb6, 0x4f, 0x83, 0xcf, 0x78, 0xad, 0xcd, 0x72, 0x31, 0x5e,
	0x93, 0xf8, 0x84, 0x5d, 0xc0, 0xd1, 0x6e, 0xee, 0xba, 0x28, 0x54, 0xdb, 0xd8, 0x7f, 0x63, 0x7f,
	0x7e, 0x87, 0x4f, 0xde, 0x66, 0xdd, 0x5d, 0xce, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x47, 0x79,
	0x1d, 0x32, 0xa9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WaiterClient is the client API for Waiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WaiterClient interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	GetUserByPosition(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Ress, error)
	GetUserByAccount(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type waiterClient struct {
	cc *grpc.ClientConn
}

func NewWaiterClient(cc *grpc.ClientConn) WaiterClient {
	return &waiterClient{cc}
}

func (c *waiterClient) GetUserByPosition(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Ress, error) {
	out := new(Ress)
	err := c.cc.Invoke(ctx, "/emaasgrpc.Waiter/GetUserByPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waiterClient) GetUserByAccount(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/emaasgrpc.Waiter/GetUserByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaiterServer is the server API for Waiter service.
type WaiterServer interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	GetUserByPosition(context.Context, *Req) (*Ress, error)
	GetUserByAccount(context.Context, *Req) (*Res, error)
}

// UnimplementedWaiterServer can be embedded to have forward compatible implementations.
type UnimplementedWaiterServer struct {
}

func (*UnimplementedWaiterServer) GetUserByPosition(ctx context.Context, req *Req) (*Ress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByPosition not implemented")
}
func (*UnimplementedWaiterServer) GetUserByAccount(ctx context.Context, req *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByAccount not implemented")
}

func RegisterWaiterServer(s *grpc.Server, srv WaiterServer) {
	s.RegisterService(&_Waiter_serviceDesc, srv)
}

func _Waiter_GetUserByPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaiterServer).GetUserByPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emaasgrpc.Waiter/GetUserByPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaiterServer).GetUserByPosition(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waiter_GetUserByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaiterServer).GetUserByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emaasgrpc.Waiter/GetUserByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaiterServer).GetUserByAccount(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Waiter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emaasgrpc.Waiter",
	HandlerType: (*WaiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByPosition",
			Handler:    _Waiter_GetUserByPosition_Handler,
		},
		{
			MethodName: "GetUserByAccount",
			Handler:    _Waiter_GetUserByAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcConf.proto",
}
